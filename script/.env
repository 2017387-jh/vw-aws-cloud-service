# Copy .env
# ===== commons =====
AWS_REGION=ap-northeast-2
ACCOUNT_ID=420509932186

# ===== S3 =====
DDN_IN_BUCKET=ddn-in-bucket
DDN_OUT_BUCKET=ddn-out-bucket

# ===== ECR / Image =====
DDN_ECR_REPO=deepdenoising-triton
DDN_ECR_TAG=1.0
DDN_ECR_IMG_TAR=deepdenoising.triton.tar
DDN_LOCAL_IMG=deepdenoising/triton
DDN_IMAGE_URI=420509932186.dkr.ecr.ap-northeast-2.amazonaws.com/deepdenoising-triton:latest

DDN_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
DDN_IMAGE_URI_TAG="${DDN_REGISTRY}/${DDN_ECR_REPO}:${DDN_ECR_TAG}"
DDN_IMAGE_URI_LATEST="${DDN_REGISTRY}/${DDN_ECR_REPO}:latest"

# ===== API Gateway =====
DDN_APIGW_NAME=ddn-api
DDN_APIGW_ENDPOINT=https://cgmgt7rdl4.execute-api.ap-northeast-2.amazonaws.com
DDN_APIGW_STAGE_NAME=\$default

# ===== API Gateway Routes =====
DDN_APIGW_PRESIGN_PATH=/presign
DDN_APIGW_INFERENCE_PATH=/inference
DDN_APIGW_HEALTH_PATH=/healthz
DDN_APIGW_PING_PATH=/ping
DDN_APIGW_INVOCATIONS_PATH=/invocations

# ===== LAMBDA =====
DDN_LAMBDA_FUNC_NAME=ddn-presign-lambda
DDN_LAMBDA_ROLE=LambdaS3AccessRole

# ===== ECS =====
DDN_ECS_EC2_NAME=ddn-ecs-ec2
DDN_ECS_CLUSTER=ddn-ecs-cluster
DDN_ECS_SERVICE=ddn-ecs-service
DDN_ECS_TASK_FAMILY=ddn-triton-task
DDN_ECS_TASK_DEF=ddn-triton-taskdef
DDN_ECS_CONTAINER=ddn-triton-container
DDN_ECS_DESIRED_TASK_COUNT=2
DDN_ECS_INSTANCE_TYPE=g4dn.xlarge
DDN_ECS_ROOT_VOLUME=200
DDN_ECS_ROLE_NAME=ecsInstanceRole
DDN_ECS_PROFILE_NAME=ecsInstanceRole

DDN_ECS_EXECUTION_ROLE_NAME=ecsTaskExecutionRole
DDN_ECS_EXECUTION_ROLE_ARN=arn:aws:iam::420509932186:role/ecsTaskExecutionRole
DDN_ECS_TASK_ROLE_NAME=ddnTaskRole
DDN_ECS_TASK_POLICY_NAME=ddnTaskPolicy
DDN_ECS_TASK_ROLE_ARN=arn:aws:iam::420509932186:role/ddnTaskRole
DDN_ECS_INSTANCE_ROLE_NAME=ddnECSInstanceRole
DDN_ECS_INSTANCE_ROLE_ARN=arn:aws:iam::420509932186:instance-profile/ecsInstanceRole

# Network Settings
DDN_VPC_ID=vpc-026400b6f5ea5c7f6
DDN_SUBNET_IDS=subnet-0b096afec739dc2a2,subnet-05fea229a7abfb9a8
DDN_SECURITY_GROUP=sg-xxxxxxxx
DDN_ECS_SG_NAME=ddn-ecs-sg
DDN_ALB_SG_NAME=ddn-alb-sg

# Port Mapping
DDN_FLASK_HTTP_PORT=50101     # Flask Server HTTP
DDN_FLASK_GRPC_PORT=50102     # Flask Server gRPC
DDN_TRITON_HTTP_PORT=50201    # Triton HTTP
DDN_TRITON_GRPC_PORT=50202    # Triton gRPC
DDN_HOST_PORT=0              # 동적 할당 (고정 필요하면 숫자)

# ALB
DDN_ALB_NAME=ddn-alb
DDN_TG_FLASK=ddn-tg-flask
# DDN_TG_TRITON=ddn-tg-triton
DDN_HEALTH_PATH=/ping            # Flask 헬스 엔드포인트
DDN_HEALTH_INTERVAL=60
DDN_HEALTH_TIMEOUT=5
DDN_HEALTH_UNHEALTHY=3
DDN_HEALTH_HEALTHY=2

# Auto Scaling
DDN_ASG_NAME=ddn-ecs-asg
DDN_LAUNCH_TEMPLATE_NAME=ddn-ecs-lt
DDN_MIN_CAPACITY=2
DDN_MAX_CAPACITY=4
DDN_SCALE_OUT_POLICY=ddn-scale-out-policy
DDN_SCALE_IN_POLICY=ddn-scale-in-policy
DDN_CPU_HIGH_THRESHOLD=60       # CPU 사용률 상한선 (%)
DDN_CPU_LOW_THRESHOLD=30        # CPU 사용률 하한선 (%)
DDN_MEMORY_HIGH_THRESHOLD=70    # 메모리 사용률 상한선 (%)
DDN_MEMORY_LOW_THRESHOLD=30     # 메모리 사용률 하한선 (%)
DDN_SCALE_IN_COOLDOWN=60     # Scale-in 후 안정화 시간
DDN_SCALE_OUT_COOLDOWN=60    # Scale-out 후 안정화 시간

# ===== SageMaker =====
DDN_MODEL_NAME=deepdenoising-model
DDN_ENDPOINT_CONFIG=deepdenoising-config
DDN_ASYNC_S3_OUTPUT=s3://ddn-out-bucket/user/
DDN_ASYNC_S3_INPUT=s3://ddn-in-bucket/user/
DDN_SM_ENDPOINT=deepdenoising-sm-async-endpoint
DDN_SNS_TOPIC_NAME=deepdenoising-async-complete
DDN_EXEC_ROLE_ARN=arn:aws:iam::420509932186:role/AmazonSageMaker-ExecutionRole
DDN_SM_INSTANCE_TYPE=ml.g4dn.xlarge
DDN_SM_INITIAL_INSTANCE_COUNT=1

DDN_MAX_CONCURRENCY=2         
DDN_INVOCATION_TIMEOUT=3600   

# ===== Billing (Firehose / S3 / Athena) =====
BILLING_FIREHOSE_NAME=ddn-apigw-accesslog-fh
BILLING_S3_BUCKET=ddn-apigw-accesslog-bucket
BILLING_S3_PREFIX=json-data/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
BILLING_S3_ERROR_PREFIX=error/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/!{timestamp:HH}/!{firehose:error-output-type}
BILLING_GLUE_DB=ddn_billing_db
BILLING_ATHENA_WORKGROUP=BillingWG
BILLING_TABLE_JSON=restapi_access_log_json
BILLING_TABLE_PARQUET=restapi_access_log_parquet
BILLING_PARQUET_PREFIX=parquet-data/
BILLING_LOG_GROUP=/aws/apigw/ddn-access-logs
BILLING_LOG_FORMAT='{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","user":"$context.authorizer.claims.cognito:username","sub":"$context.authorizer.claims.sub","requestTime":$context.requestTimeEpoch,"httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":$context.responseLength}'
BILLING_PARQUET_DAILY_CRON=cron(0 2 * * ? *)   # 매일 11시(KST 20시)

# ===== TEST IMAGE =====
DDN_TEST_IMAGE_PATH=../demo_image/static_demo_140um_madible_VD.tif
DDN_TEST_IMAGE_KEY=user/static_demo_140um_madible_VD.tif

DDN_ALB_DNS=ddn-alb-244774623.ap-northeast-2.elb.amazonaws.com
